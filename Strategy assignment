1. Complete the missing parts in backtester_portfolio()

def backtest_portfolio(portfolio, tickers, risk_free_rate=0.0451):
    n_stocks, n_days = portfolio.shape
    price_matrix = np.zeros((n_stocks, n_days))

    for i, ticker in enumerate(tickers):
        df = pd.read_csv(f"{ticker}.csv")
        df = df.reset_index(drop=True)
        df['Close'] = pd.to_numeric(df['Close'])
        price_matrix[i, :] = df['Close'].to_numpy()

    stock_returns = pd.DataFrame(price_matrix).pct_change(axis=1).fillna(0).values
    daily_returns = np.nansum(portfolio * stock_returns, axis=0)

    # ✅ Cumulative Returns
    cumulative_returns = np.cumprod(1 + daily_returns)

    # ✅ Sharpe Ratio
    sharpe_ratio = (np.mean(daily_returns) / np.std(daily_returns)) * np.sqrt(252)

    # ✅ Turnover
    weight_diff = np.abs(np.diff(portfolio, axis=1))
    turnover = np.sum(weight_diff) / (n_days - 1)

    # ✅ Max Drawdown
    cumulative_curve = cumulative_returns
    rolling_max = np.maximum.accumulate(cumulative_curve)
    drawdown = 1 - cumulative_curve / rolling_max
    max_drawdown = np.max(drawdown)

    # ✅ Correlation
    correlations = []
    for i in range(n_stocks):
        x = daily_returns
        y = stock_returns[i, :]
        mask = ~np.isnan(x) & ~np.isnan(y)
        if np.sum(mask) > 1:
            corr = np.corrcoef(x[mask], y[mask])[0, 1]
            correlations.append(corr)
        else:
            correlations.append(np.nan)
    mean_correlation = np.nanmean(correlations)

    # ✅ Results Dictionary
    results = {
        "Sharpe Ratio": sharpe_ratio,
        "Max Drawdown": max_drawdown,
        "Turnover": turnover,
        "Total Return": cumulative_returns[-1] - 1,
        "Mean Correlation (Portfolio vs Stocks)": mean_correlation,
        "Daily Returns": daily_returns,
        "Cumulative Returns": cumulative_returns
    }

    # ✅ Plotting
    days = np.arange(n_days)
    fig = make_subplots(rows=4, cols=1,
        subplot_titles=("Cumulative Returns", "Daily Returns", "Drawdown Curve", "Portfolio vs Top 5 Stocks"),
        vertical_spacing=0.1, shared_xaxes=True)

    fig.add_trace(go.Scatter(x=days, y=cumulative_returns, name="Cumulative Return"), row=1, col=1)
    fig.add_trace(go.Scatter(x=days, y=daily_returns, name="Daily Return"), row=2, col=1)
    fig.add_trace(go.Scatter(x=days, y=drawdown, name="Drawdown"), row=3, col=1)
    fig.add_trace(go.Scatter(x=days, y=daily_returns, name="Portfolio"), row=4, col=1)

    top_5_idx = np.argsort(correlations)[-5:]
    for i in top_5_idx:
        fig.add_trace(go.Scatter(x=days, y=stock_returns[i], name=f"{tickers[i]}"), row=4, col=1)

    fig.update_layout(height=1200, title_text="Portfolio Performance Summary", showlegend=True)
    py.plot(fig, filename="portfolio_summary.html")

    return results, correlations
